[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-tdd",
    "section": "",
    "text": "Example TDD nbdev module",
    "crumbs": [
      "nbdev-tdd"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev-tdd",
    "section": "Install",
    "text": "Install\npip install nbdev_tdd",
    "crumbs": [
      "nbdev-tdd"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev-tdd",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "nbdev-tdd"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "TDD with nbdev",
    "section": "",
    "text": "source",
    "crumbs": [
      "TDD with nbdev"
    ]
  },
  {
    "objectID": "core.html#assert",
    "href": "core.html#assert",
    "title": "TDD with nbdev",
    "section": "assert",
    "text": "assert\n\nsay_hello(\"Isaac\")\n\n'Hello Isaac!'\n\n\n\nassert say_hello(\"Hamel\") == \"Hello Hamel!\"",
    "crumbs": [
      "TDD with nbdev"
    ]
  },
  {
    "objectID": "core.html#fastcore.test",
    "href": "core.html#fastcore.test",
    "title": "TDD with nbdev",
    "section": "fastcore.test",
    "text": "fastcore.test\n\nfrom fastcore.test import *\n\n\ntest_eq(say_hello(\"Hamel\"), \"Hello Hamel!\")",
    "crumbs": [
      "TDD with nbdev"
    ]
  },
  {
    "objectID": "core.html#unittest",
    "href": "core.html#unittest",
    "title": "TDD with nbdev",
    "section": "unittest",
    "text": "unittest\n\nsource\n\nadd\n\n add (a, b)\n\n\nsource\n\n\nTestNotebook\n\n TestNotebook (methodName='runTest')\n\n*A class whose instances are single test cases.\nBy default, the test code itself should be placed in a method named ‘runTest’.\nIf the fixture may be used for many test cases, create as many test methods as are needed. When instantiating such a TestCase subclass, specify in the constructor arguments the name of the test method that the instance is to execute.\nTest authors should subclass TestCase for their own tests. Construction and deconstruction of the test’s environment (‘fixture’) can be implemented by overriding the ‘setUp’ and ‘tearDown’ methods respectively.\nIf it is necessary to override the init method, the base class init method must always be called. It is important that subclasses should not change the signature of their init method, since instances of the classes are instantiated automatically by parts of the framework in order to be run.\nWhen subclassing TestCase, you can set these attributes: * failureException: determines which exception will be raised when the instance’s assertion methods fail; test methods raising this exception will be deemed to have ‘failed’ rather than ‘errored’. * longMessage: determines whether long messages (including repr of objects used in assert methods) will be printed on failure in addition to any explicit message passed. * maxDiff: sets the maximum length of a diff in failure messages by assert methods using difflib. It is looked up as an instance attribute so can be configured by individual tests if required.*",
    "crumbs": [
      "TDD with nbdev"
    ]
  }
]